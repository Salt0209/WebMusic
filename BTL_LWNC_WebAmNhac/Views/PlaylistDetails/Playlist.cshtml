@model List<BTL_LWNC_WebAmNhac.Models.PlaylistDetail>

@{
	ViewData["Title"] = "Playlists...";
	Layout = "_Layout";
	var songs = new List<object>(); 

	@foreach (var item in Model)
{
	var song = new
	{
		name = item.Song.Name,
		singer = item.Song.Artist.Name,
		path = item.Song.Url,
		image = item.Song.Thumbnail
	};

	songs.Add(song);
}

// Convert the songs list to JSON
var songsJson = Newtonsoft.Json.JsonConvert.SerializeObject(songs);

}
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a class="text-decoration-none text-black" href="@Url.Action("Index","Home")"><i class="fas fa-home"></i>Trang chủ</a></li>
        <li class="breadcrumb-item active text-decoration-underline" aria-current="page"><i class="fas fa-play m-1"></i>@Model.First().Playlist.Name</li>
    </ol>
</nav>
<br/>

<div class="player">
	<!-- Dashboard -->
	<div class="dashboard">
		<!-- Header -->
		<header>
			<h4>Đang phát:</h4>
			<h2>@Model.FirstOrDefault().Playlist.Name</h2>
		</header>

		<!-- CD -->
		<div class="cd">
			<div class="cd-thumb" style="background-image: url('@Model.FirstOrDefault().Playlist.Thumbnail')">
			</div>
		</div>

		<!-- Control -->
		<div class="control">
			<div class="btn btn-repeat">
				<i class="fas fa-redo"></i>
			</div>
			<div class="btn btn-prev">
				<i class="fas fa-step-backward"></i>
			</div>
			<div class="btn btn-toggle-play">
				<i class="fas fa-pause icon-pause"></i>
				<i class="fas fa-play icon-play"></i>
			</div>
			<div class="btn btn-next">
				<i class="fas fa-step-forward"></i>
			</div>
			<div class="btn btn-random">
				<i class="fas fa-random"></i>
			</div>
            <div class="btn btn-volume">
				<i class="fas fa-volume-up"></i>
				<input type="range" id="volume" name="volume" min="0" max="1" step="0.01" value="1">
			</div>
		</div>

		<input id="progress" class="progress" type="range" value="0" step="1" min="0" max="100">

		<audio id="audio" src=""></audio>
	</div>

	<!-- Playlist -->
	<div class="playlist">
	</div>
</div>

<style>
    :root {
        --primary-color: #ec1f55;
        --text-color: #333;
    }

    * {
        padding: 0;
        margin: 0;
        box-sizing: inherit;
    }

    body {
        background-color: #fff;
    }

    html {
        box-sizing: border-box;
        font-family: "Poppins", sans-serif;
    }

    .player {
        position: relative;
        max-width: 480px;
        margin: 0 auto;
    }

        .player .icon-pause {
            display: none;
        }

        .player.playing .icon-pause {
            display: inline-block;
        }

        .player.playing .icon-play {
            display: none;
        }

    .dashboard {
        padding: 16px 16px 14px;
        background-color: #f5f5f5;
        top: 0;
        width: 100%;
        max-width: 480px;
        border-bottom: 1px solid #ebebeb;
    }

    /* HEADER */
    header {
        text-align: center;
        margin-bottom: 10px;
    }

        header h4 {
            color: var(--primary-color);
            font-size: 12px;
        }

        header h2 {
            color: var(--text-color);
            font-size: 20px;
        }

    /* CD */
    .cd {
        display: flex;
        margin: auto;
        width: 200px;
    }

    .cd-thumb {
        width: 100%;
        padding-top: 100%;
        border-radius: 50%;
        background-color: #333;
        background-size: cover;
        margin: auto;
    }

    /* CONTROL */
    .control {
        display: flex;
        align-items: center;
        justify-content: space-around;
        padding: 18px 0 8px 0;
    }

        .control .btn {
            color: #666;
            padding: 18px;
            font-size: 18px;
        }

            .control .btn.active {
                color: var(--primary-color);
            }

        .control .btn-toggle-play {
            width: 56px;
            height: 56px;
            border-radius: 50%;
            font-size: 24px;
            color: #fff;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: var(--primary-color);
        }

    .progress {
        width: 100%;
        -webkit-appearance: none;
        height: 6px;
        background: #d3d3d3;
        outline: none;
        opacity: 0.7;
        -webkit-transition: 0.2s;
        transition: opacity 0.2s;
    }

        .progress::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 12px;
            height: 6px;
            background-color: var(--primary-color);
            cursor: pointer;
        }

    /* PLAYLIST */
    .playlist {
        padding: 12px;
    }

    .song {
        display: flex;
        align-items: center;
        margin-bottom: 12px;
        background-color: #fff;
        padding: 8px 16px;
        border-radius: 5px;
        box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1);
    }

        .song.active {
            background-color: var(--primary-color);
        }

        .song:active {
            opacity: 0.8;
        }

        .song.active .option,
        .song.active .author,
        .song.active .title {
            color: #fff;
        }

        .song .thumb {
            width: 44px;
            height: 44px;
            border-radius: 50%;
            background-size: cover;
            margin: 0 8px;
        }

        .song .body {
            flex: 1;
            padding: 0 16px;
        }

        .song .title {
            font-size: 18px;
            color: var(--text-color);
        }

        .song .author {
            font-size: 12px;
            color: #999;
        }

        .song .option {
            padding: 16px 8px;
            color: #999;
            font-size: 18px;
        }

    .option-delete .fa-trash {
        display: none;
    }

    .option-delete.active .fa-trash {
        display: inline-block;
    }

</style>

<script>
	const $ = document.querySelector.bind(document);
	const $$ = document.querySelectorAll.bind(document);
	const player = $('.player')
	const cd = $('.cd')
	const heading = $('header h2')
	const cdThumb = $('.cd-thumb')
	const audio = $('#audio')
	const playBtn = $('.btn-toggle-play')
	const progress = $('#progress')
	const nextBtn = $('.btn-next')
	const prevBtn = $('.btn-prev')
	const randomBtn = $('.btn-random')
	const repeatBtn = $('.btn-repeat')
	const playlist = $('.playlist')
    
	// const volume = $('#volume')
var songs = @Html.Raw(songsJson)
// var loadFirst= true
	

	const app = {
		currentIndex: 0,
		currentIndex: 0,
		isPlaying: false,
		isRandom: false,
		isRepeat: false,
		
	render: function(){
		const htmls = songs.map((song,index)=>{
			return `<div class="song ${index === this.currentIndex?'active':''}" data-index="${index}">
			<div class="thumb" style="background-image: url('${song.image}')">
			</div>
			<div class="songbody">
				<h3 class="title">${song.name}</h3>
				<p class="author">${song.singer}</p>
			</div>
			<div class="option">
			    <i class="fas fa-ellipsis-h" style="display:none"></i>
			</div>
		</div>`
		})
		playlist.innerHTML = htmls.join('')
	},
	defineProperties: function(){
		Object.defineProperty(this,'currentSong',{
			get: function(){
				return songs[this.currentIndex]
			}
		})
	},
	handleEvents: function(){
		const cdWidth = cd.offsetWidth

		//Xu ly CD quay / dung
		const cdThumbAnimate = cdThumb.animate([
			{transform: 'rotate(360deg)'}
		],{
			duration:10000,
			iterations: Infinity,
		})
		cdThumbAnimate.pause()
			console.log(cdThumbAnimate)
		//Xu ly phong to / thu nho
		document.onscroll = function(){
			document.onscroll = function(){
				const scrollTop = window.scrollY || document.documentElement.scrollTop
				const newCdWidth = cdWidth - scrollTop

				cd.style.width = newCdWidth >0 ? newCdWidth + 'px' : 0
				cd.style.opacity = newCdWidth / cdWidth
			}
		}

		//Xu ly khi click play
		playBtn.onclick = function(){
			if(app.isPlaying){
				audio.pause()

			}else{
				audio.play()
			}
			
		}
		audio.onplay= function(){
			app.isPlaying = true
			player.classList.add('playing')
			cdThumbAnimate.play()
		}
		audio.onpause=function(){
			app.isPlaying = false
			player.classList.remove('playing')
			cdThumbAnimate.pause()
		}
		audio.ontimeupdate = function () {
			if (audio.duration) {
				const progressPercent = Math.floor((audio.currentTime / audio.duration) * 100);
				progress.value = progressPercent;
			}
		};
		
		progress.oninput = function (e) {
			const seekTime = (audio.duration / 100) * e.target.value;
			audio.currentTime = seekTime;
		};
			volume.oninput = function () {
			    audio.volume = volume.value
			}

		//Khi next song
		nextBtn.onclick = function(){
			if(app.isRandom){
				app.playRandomSong()
			}else{
				app.nextSong()
			}
			audio.play()
			app.render()
			app.scrollToActiveSong()
		}
		prevBtn.onclick = function(){
			if(app.isRandom){
				app.playRandomSong()
			}else{
				app.prevSong()
			}
			audio.play()
			app.render()
			app.scrollToActiveSong()
		}
		//Xu ly random
		randomBtn.onclick = function(){
			// app.isRepeat=false
			//     repeatBtn.classList.toggle('active', app.isRepeat)
			app.isRandom = !app.isRandom
			randomBtn.classList.toggle('active',app.isRandom)
		}
		//Xu ly Repeat
		repeatBtn.onclick = function(){
			// app.isRandom = false
			//     randomBtn.classList.toggle('active', app.isRandom)
			app.isRepeat = !app.isRepeat
			repeatBtn.classList.toggle('active',app.isRepeat)
		} 
		//Xu ly next song khi audio ended
		audio.onended = function(){
			if(app.isRepeat){
				audio.play()
			}else{
				nextBtn.click()
			}
		}
		//Lang nghe hanh vi khi click vao playlist
		playlist.onclick = function(e){
			const songNode = e.target.closest('.song:not(.active)')

			if(songNode || e.target.closest('.option')){
				//Xu ly khi click vao song
				if(songNode){
					app.currentIndex = Number(songNode.dataset.index)
					app.loadCurrentSong()
					app.render()
					audio.play()
				}

				//Xu ly khi click vao option
				if(e.target.closest('.option')){

				}
			}
		}

		
	},
	scrollToActiveSong: function(){
		if(this.currentIndex<3){
			setTimeout(()=>{
				$('.song.active').scrollIntoView({
					behavior: 'smooth',
					block: 'center'
				});
			})
		}else{
			setTimeout(()=>{
				$('.song.active').scrollIntoView({
					behavior: 'smooth',
					block: 'nearest'
				});
			})
		}

	},
	loadCurrentSong:function(){
		heading.textContent = this.currentSong.name
		cdThumb.style.backgroundImage = `url('${this.currentSong.image}')`
		audio.src = this.currentSong.path
	},
	nextSong: function(){
		this.currentIndex++
		if(this.currentIndex >= songs.length){
			this.currentIndex = 0
		}
		this.loadCurrentSong()
	},
	prevSong: function(){
		this.currentIndex--
		if(this.currentIndex <= 0){
			this.currentIndex = songs.length -1
		}
		this.loadCurrentSong()
	},
	playRandomSong: function(){
		let newIndex  
		do {
		   newIndex = Math.floor(Math.random() * songs.length)
		}while(newIndex === this.currentIndex)

		this.currentIndex = newIndex
		this.loadCurrentSong()
	},
	// loadFirstTime: function(){
	//     if (loadFirst) {
	//        playBtn.click()
	//        loadFirst = false
	//     }
	// },
	start: function(){
		this.handleEvents()

		this.defineProperties()

		this.loadCurrentSong()

		// this.loadFirstTime()
		this.render()
	}
}
app.start()
</script>